package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"example/graph/model"

	"github.com/cloudmatelabs/gorm-gqlgen-relay/relay"
	customContext "github.com/juunini/gorm-custom-context"
	"gorm.io/gorm/clause"
)

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, first *int, after *string, last *int, before *string, orderBy map[string]interface{}, where *model.TodoFilter) (*relay.Connection[model.Todo], error) {
	context := customContext.GetContext(ctx)
	db := context.Database.Preload("User")

	return relay.Paginate[model.Todo](db, where, orderBy, relay.PaginateOption{
		First:      first,
		After:      after,
		Last:       last,
		Before:     before,
		Table:      "todos",
		PrimaryKey: "id",
	})
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	context := customContext.GetContext(ctx)
	db := context.Database

	user := &model.User{
		ID:   input.UserID,
		Name: "test",
	}
	if err := db.Clauses(clause.OnConflict{DoNothing: true}).Create(user).Error; err != nil {
		return nil, err
	}

	todo := &model.Todo{
		Text:   input.Text,
		UserID: &input.UserID,
	}
	err := db.Create(todo).Error

	return todo, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
