// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"
)

type BooleanFilter struct {
	Equal    *bool `json:"equal,omitempty"`
	NotEqual *bool `json:"notEqual,omitempty"`
	IsNull   *bool `json:"isNull,omitempty"`
}

type FloatFilter struct {
	Equal    *float64  `json:"equal,omitempty"`
	NotEqual *float64  `json:"notEqual,omitempty"`
	In       []float64 `json:"in,omitempty"`
	NotIn    []float64 `json:"notIn,omitempty"`
	Gt       *float64  `json:"gt,omitempty"`
	Gte      *float64  `json:"gte,omitempty"`
	Lt       *float64  `json:"lt,omitempty"`
	Lte      *float64  `json:"lte,omitempty"`
	IsNull   *bool     `json:"isNull,omitempty"`
}

type IDFilter struct {
	Equal        *string  `json:"equal,omitempty"`
	EqualFold    *string  `json:"equalFold,omitempty"`
	NotEqual     *string  `json:"notEqual,omitempty"`
	In           []string `json:"in,omitempty"`
	NotIn        []string `json:"notIn,omitempty"`
	Contains     *string  `json:"contains,omitempty"`
	ContainsFold *string  `json:"containsFold,omitempty"`
	Gt           *string  `json:"gt,omitempty"`
	Gte          *string  `json:"gte,omitempty"`
	Lt           *string  `json:"lt,omitempty"`
	Lte          *string  `json:"lte,omitempty"`
	HasPrefix    *string  `json:"hasPrefix,omitempty"`
	HasSuffix    *string  `json:"hasSuffix,omitempty"`
	IsNull       *bool    `json:"isNull,omitempty"`
}

type IntFilter struct {
	Equal    *int  `json:"equal,omitempty"`
	NotEqual *int  `json:"notEqual,omitempty"`
	In       []int `json:"in,omitempty"`
	NotIn    []int `json:"notIn,omitempty"`
	Gt       *int  `json:"gt,omitempty"`
	Gte      *int  `json:"gte,omitempty"`
	Lt       *int  `json:"lt,omitempty"`
	Lte      *int  `json:"lte,omitempty"`
	IsNull   *bool `json:"isNull,omitempty"`
}

type MapEntry struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type MapFilter struct {
	Equal        *MapEntry   `json:"equal,omitempty"`
	EqualFold    *MapEntry   `json:"equalFold,omitempty"`
	NotEqual     *MapEntry   `json:"notEqual,omitempty"`
	In           *MapInEntry `json:"in,omitempty"`
	NotIn        *MapInEntry `json:"notIn,omitempty"`
	Contains     *MapEntry   `json:"contains,omitempty"`
	ContainsFold *MapEntry   `json:"containsFold,omitempty"`
	Gt           *MapEntry   `json:"gt,omitempty"`
	Gte          *MapEntry   `json:"gte,omitempty"`
	Lt           *MapEntry   `json:"lt,omitempty"`
	Lte          *MapEntry   `json:"lte,omitempty"`
	HasPrefix    *MapEntry   `json:"hasPrefix,omitempty"`
	HasSuffix    *MapEntry   `json:"hasSuffix,omitempty"`
	IsNull       *bool       `json:"isNull,omitempty"`
}

type MapInEntry struct {
	Key   string   `json:"key"`
	Value []string `json:"value,omitempty"`
}

type StringFilter struct {
	Equal        *string  `json:"equal,omitempty"`
	EqualFold    *string  `json:"equalFold,omitempty"`
	NotEqual     *string  `json:"notEqual,omitempty"`
	In           []string `json:"in,omitempty"`
	NotIn        []string `json:"notIn,omitempty"`
	Contains     *string  `json:"contains,omitempty"`
	ContainsFold *string  `json:"containsFold,omitempty"`
	Gt           *string  `json:"gt,omitempty"`
	Gte          *string  `json:"gte,omitempty"`
	Lt           *string  `json:"lt,omitempty"`
	Lte          *string  `json:"lte,omitempty"`
	HasPrefix    *string  `json:"hasPrefix,omitempty"`
	HasSuffix    *string  `json:"hasSuffix,omitempty"`
	IsNull       *bool    `json:"isNull,omitempty"`
}

type TimeFilter struct {
	Equal    *time.Time   `json:"equal,omitempty"`
	NotEqual *time.Time   `json:"notEqual,omitempty"`
	In       []*time.Time `json:"in,omitempty"`
	NotIn    []*time.Time `json:"notIn,omitempty"`
	Gt       *time.Time   `json:"gt,omitempty"`
	Gte      *time.Time   `json:"gte,omitempty"`
	Lt       *time.Time   `json:"lt,omitempty"`
	Lte      *time.Time   `json:"lte,omitempty"`
	IsNull   *bool        `json:"isNull,omitempty"`
}

type TodoFilter struct {
	ID   *IDFilter      `json:"id,omitempty"`
	Text *StringFilter  `json:"text,omitempty"`
	Done *BooleanFilter `json:"done,omitempty"`
}

type UUIDFilter struct {
	Equal    *string  `json:"equal,omitempty"`
	NotEqual *string  `json:"notEqual,omitempty"`
	In       []string `json:"in,omitempty"`
	NotIn    []string `json:"notIn,omitempty"`
	Gt       *string  `json:"gt,omitempty"`
	Gte      *string  `json:"gte,omitempty"`
	Lt       *string  `json:"lt,omitempty"`
	Lte      *string  `json:"lte,omitempty"`
	IsNull   *bool    `json:"isNull,omitempty"`
}
